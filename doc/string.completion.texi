@node string completion, string soundex, search basic, Top
@chapter (string completion)

This module provides a facility that can be used to implement features such as
TAB-completion in programs.  A class @code{<string-completer>} tracks all the 
potential complete strings.  Here is an example usage.

@lisp
(use-modules (string completion)
             (oop goops)
             (srfi srfi-11))      ;; for the (let-values)

(define c (make <string-completer>))
(add-strings! c "you your yourself yourselves")

(let-values (((completions expansion exact? unique?) (complete c "yours")))
            (display completions)(newline)
            (display expansion) (newline)
            (display exact?)(newline)
            (display unique?)(newline))

==> ("yourself" "yourselves")
    "yoursel"
    #f
    #f
@end lisp

There are several more options for usage, which will be detailed below.

@deftp Class <string-completer>
This is the class that knows what the possible expansions are, and 
can determine the completions of given partial strings.  The following
are the recognized keywords on the call to @code{make}:

@table @code
@item #:strings
This gives the completer an initial set of strings.  It is optional, and
the @code{add-strings!} method can add strings to the completer later,
whether these initial strings were given or not.  The strings that 
follow this keyword can take any form that the @code{add-strings!} 
method can take (see below).

@item #:case-sensitive?
This is a boolean that directs the completer to do its comparisons in 
a case sensiteve way or not.  The default value is @code{#t}, for
case-sensitive behavior.
@end table
@end deftp

@defmethod <string-completer> add-strings! completer strings
Adds the given strings to the set of possible comletions known to
@var{completer}.  @var{strings} can either be a list of strings, or a
single string of words separated by spaces.  The order of the words
given is not important.
@end defmethod

@defmethod <string-completer> all-completions completer str
Returns a list of all possible completions for the given string
@var{str}.  The returned list will be in alphabetical order.

Note that users wanting to customize the completion algorithm 
can subclass @code{<string-completer>} and override this method.
@end defmethod

@defmethod <string-completer> complete completer str
Accepts a string, @var{str}, and returns four values via a
@code{values} call.  These are:
@table @var
@item completions
This is the same list that would be returned from a call to
@code{all-completions}.

@item expansion
This is the longest string that would have returned identical results.
In other words, this is what most programs replace your string with
when you press TAB once.  This value will be equal to @var{str} if
there were no known completionss.

@example
("wonders" "wonderment" "wondering") 
completed against "won" yields an expansion 
of "wonder"
@end example

@item exact?
This will be @code{#t} if the returned @var{expansion} is an exact
match of one of the possible completions.

@item unique?
This will be #t if there is only one possible completion. Note that
when @var{unique?}  is @code{#t}, then @var{exact?} will also be
@code{#t}.
@end table
@end defmethod

@ignore
   arch-tag: 9b9503fb-7721-4523-8da6-68478d3dbdaa
@end ignore
