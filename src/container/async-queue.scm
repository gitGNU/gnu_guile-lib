(define-module (container async-queue)
  #:export (<async-queue> push! pop!)
  #:use-module (ice-9 syncase)
  #:use-module (ice-9 threads)
  #:use-module (oop goops)
  #:use-module (container queue))

(define-class <async-queue> ()
  (queue #:init-form (make-queue) #:getter queue)
  (condv #:init-form (make-condition-variable) #:getter condv)
  (mutex #:init-form (make-mutex) #:getter mutex)
  (waiting-threads #:init-value 0 #:accessor waiting-threads))

(define-method (push! (q <async-queue>) elt)
  (with-mutex (mutex q)
    (enqueue! (queue q) elt)
    (if (> (waiting-threads q) 0)
        (signal-condition-variable (condv q)))))

(define-method (pop! (q <async-queue>))
  (with-mutex (mutex q)
    (cond ((queue-empty? (queue q))
           (set! (waiting-threads q) (+ (waiting-threads q) 1))
           (let loop ()
             (cond ((queue-empty? (queue q))
                    (wait-condition-variable (condv q) (mutex q))
                    (loop))))
           (set! (waiting-threads q) (- (waiting-threads q) 1))))
    (dequeue! (queue q))))
